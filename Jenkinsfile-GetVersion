pipeline {
    agent any
    environment {
        versionMaster = libraryResource 'master_version'
        versionSprint = "${versionMaster.split('\\.')[2].trim()}"

        groovyScript = load "vars/get_version.groovy"
        
        PROJECT_VERSION = get_version('master') 
    }
    stages {
        stage('Test Versions') {            
            parallel {

 // Template for testing
 // - support/3.16 - 3.16.BUILD_NUMBER.0 = 3.16.1.0
 // - support/3.17 - 3.17.BUILD_NUMBER.0 = 3.17.1.0
 // - Master Branch  - 3.18.12.BUILD_NUMBER = 3.18.19.0
 // - Hotfix Branch  - *.**.**.BUILD_NUMBER = 3.18.19.1
 // - Release Branch - *.**.+1.BUILD_NUMBER = 3.18.20.1
 // - Develop Branch - *.+1.+1.BUILD_NUMBER = 3.19.20.1
 // - Feature (any) Branch -+1.+1.+1.BUILD_NUMBER = 4.19.20.1

                stage('Test support/3.16.25') {
                    steps {                        
                        script{		
                            def currentVersion = "3.16.25.${BUILD_NUMBER}"
                            echo  "Testing version ${currentVersion}"

                            if(groovyScript.call('support/3.16.25') != currentVersion){
                                error 'Not Correct Version for support branch!!'
                            }     
                        }                  
                    }
                }

                stage('Test support/3.17.25') {
                    steps {                        
                        script{		
                            def currentVersion = "3.17.25.${BUILD_NUMBER}"
                            echo  "Testing version ${currentVersion}"

                            if(groovyScript.call('support/3.17.25') != currentVersion){
                                error 'Not Correct Version for support branch!!'
                            }     
                        }                  
                    }
                }

                stage('Test master branch') {
                    steps {                        
                        script{		
                            def currentVersion = "3.18.${versionSprint}.${BUILD_NUMBER}"
                            echo  "Testing version ${currentVersion}"

                            if(groovyScript.call('master') != currentVersion){
                                error 'Not Correct Version for master branch!!'
                            }     
                        }                  
                    }
                }
                stage('Test hotfix branch') {
                    steps {                        
                        script{		
                            def currentVersion = "3.18.${versionSprint}.${BUILD_NUMBER}"
                            echo  "Testing version ${currentVersion}"

                            if(groovyScript.call('hotfix/lv-666') != currentVersion){
                                error 'Not Correct Version for hotfix branch!'
                            }     
                        }                  
                    }
                }
                stage('Test release branch') {
                    steps {                        
                        script{		
                            def currentVersion = "3.19.25.${BUILD_NUMBER}"
                            echo  "Testing version ${currentVersion}"

                            if(groovyScript.call('release/3.19.25') != currentVersion){
                                error 'Not Correct Version for release branch!'
                            }     
                        }                  
                    }
                }
                stage('Test develop branch') {
                    steps {                        
                        script{		
                            def currentVersion = "3.19.${versionSprint}.${BUILD_NUMBER}"
                            echo  "Testing version ${currentVersion}"

                            if(groovyScript.call('develop') != currentVersion){
                                error 'Not Correct Version for develop branch!'
                            }     
                        }                  
                    }
                }
                stage('Test feature branch') {
                    steps {                        
                        script{		
                            def currentVersion = "4.19.${versionSprint}.${BUILD_NUMBER}"
                            echo  "Testing version ${currentVersion}"

                            if(groovyScript.call('feature/lv-333') != currentVersion){
                                error 'Not Correct Version for feature branch!'
                            }     
                        }                  
                    }
                }
            }
        }
    }
}